using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Main.Common.Attributes;
using Main.Common;
using MainEntity.Interfaces;
using Main.Areas.Admin.Models.Common;
using MainCommon;
using Main.Areas.Admin.Models.ControllerView.Transaction;

namespace Main.Areas.Admin.Controllers
{
    public class TransactionController : Controller
    {
        private IShoppingService _shoppingService;
        private IActivityLogService _activityLogService;

        public TransactionController(IShoppingService shopping_service, IActivityLogService activity_log_service)
        {
            _shoppingService = shopping_service;
            _activityLogService = activity_log_service;
        }

        [PortalAuthorize(Roles = UserRoles.SUPERUSER_ROLE)]
        public ActionResult Index()
        {
            return View();
        }

        #region Unsuccessful Transactions Report
        [PortalAuthorize(Roles = UserRoles.SUPERUSER_ROLE)]
        public ActionResult ReportMothlyFees(Main.Areas.Admin.Models.ControllerView.Transaction.ShoppingTransactionsFilter filter, bool unsuccessful = false, int ps = 100, int p = 1, string downloadtype = "normal")
        {
            short[] tranState = unsuccessful ?
                new[] { (short)ShoppingTransactionStateEnum.Rollback } :
                new[] { (short)ShoppingTransactionStateEnum.Prepaid, (short)ShoppingTransactionStateEnum.Complete };
            var tranType = new[] { 
                ShoppingTransactionTypeEnum.monthlyfee.ToString(), ShoppingTransactionTypeEnum.authorize_monthlyfee.ToString(),
                ShoppingTransactionTypeEnum.authorize_monthlyfee_purchase.ToString(), ShoppingTransactionTypeEnum.monthlyfee_purchase.ToString() };

            var model = _shoppingService.GetShoppingTransactions((p - 1) * ps, ps, filter.fsincedata, filter.fbeforedata, tranState, tranType);

            //set download type
            DownloadHelper.DownloadType dType;
            switch (downloadtype)
            {
                case "excel": dType = DownloadHelper.DownloadType.excel; break;
                case "text": dType = DownloadHelper.DownloadType.text; break;
                default: dType = DownloadHelper.DownloadType.none; break;
            }

            //handle if download is requested
            if (dType != DownloadHelper.DownloadType.none)
            {
                //set style for downloads
                List<string> style = new List<string> {
                    "width:300px;","width:100px;text-align:center;","width:100px;text-align:center;"
                    ,"width:200px;text-align:center;","width:90px;text-align:center;","width:80px;text-align:center;"
                    ,"width:80px;text-align:center;","width:100px;text-align:center;","width:80px;text-align:center;"
                    };

                //initialize download
                DownloadHelper d = new DownloadHelper(dType, style);

                //add captions
                d.AddCaptions(new List<string> { "Name", "User Name", "CURRENT Membership Type", "Credit Card #", "Transaction ID", "Amount", "Transaction Date", "Transaction Type", "Purchased Item(s)" });

                //add data
                foreach (var item in model)
                {
                    d.AddDataRow(new List<string> {
                    item.MembershipLastName + ", " + item.MembershipFirstName
                ,item.MembershipUserName
                ,(item.CurrentSubscribeEndDate>DateTime.Now) ? item.CurrentSubscribeTitle : ""
                ,"xxxx-xxxx-xxxx-"+item.CardID
                ,item.TransactionID.ToString()
                ,item.Amount!=null?"$"+item.Amount.Value.ToString("F2"):string.Empty
                ,item.TransactionDate.ToString("MM/dd/yyyy hh:mm:ss")
                ,string.Join(", ", item.TransactionType.Split('_'))
                ,string.Join(", ", item.ProductTypes.Distinct().Select(t=>t.ToString()).ToArray())
                });
                }

                return File(d.RetrieveBytes(), d.ContentType, string.Format("{0}." + d.Extension, "ReportMothlyFees"));
            }

            int recordsCount = _shoppingService.GetShoppingTransactionsCnt(filter.fsincedata, filter.fbeforedata, tranState, tranType);
            var model = _shoppingService.GetShoppingTransactions((p - 1) * ps, ps, filter.fsincedata, filter.fbeforedata, tranState, tranType);

            this.ViewData["Pager"] = new PagingData(Request.Path, Request.QueryString, recordsCount, ps, p, 1, 100);
            this.ViewData["Title"] = "Monthly Fees";
            this.ViewData["Filter"] = filter;
            this.ViewData["TotalCount"] = recordsCount.ToString();

            if (unsuccessful)
            {
                var activity = _activityLogService.GetLastActivity(model.Select(t => t.UserId).ToArray(), new[] { ActivityLogTypeEnum.DownloadClass, ActivityLogTypeEnum.StreamingClass, ActivityLogTypeEnum.StreamingFreeClass, ActivityLogTypeEnum.StreamingFullFreeClass });
                this.ViewData["Activity"] = activity;
            }

            return unsuccessful ? View("UnsuccessfulTransactionList", model) : View("SuccessfulTransactionReport", model);
        }
        #endregion

        #region Successful Transactions Report
        [PortalAuthorize(Roles = UserRoles.SUPERUSER_ROLE)]
        public ActionResult ReportPurchases(ShoppingTransactionsFilter filter, int ps = 100, int p = 1, string downloadtype = "normal")
        {
            var tranState = new[] { (short)ShoppingTransactionStateEnum.Prepaid, (short)ShoppingTransactionStateEnum.Complete };
            var tranType = new[] { 
                ShoppingTransactionTypeEnum.purchase.ToString(),
                ShoppingTransactionTypeEnum.authorize_monthlyfee_purchase.ToString(), ShoppingTransactionTypeEnum.monthlyfee_purchase.ToString() };

            var model = _shoppingService.GetShoppingTransactions((p - 1) * ps, ps, filter.fsincedata, filter.fbeforedata, tranState, tranType);

            //set download type
            DownloadHelper.DownloadType dType;
            switch (downloadtype)
            {
                case "excel": dType = DownloadHelper.DownloadType.excel; break;
                case "text": dType = DownloadHelper.DownloadType.text; break;
                default: dType = DownloadHelper.DownloadType.none; break;
            }

            //handle if download is requested
            if (dType != DownloadHelper.DownloadType.none)
            {
                //set style for downloads
                List<string> style = new List<string> {
                    "width:300px;","width:100px;text-align:center;","width:100px;text-align:center;"
                    ,"width:200px;text-align:center;","width:90px;text-align:center;","width:80px;text-align:center;"
                    ,"width:80px;text-align:center;","width:100px;text-align:center;","width:80px;text-align:center;"
                    };

                //initialize download
                DownloadHelper d = new DownloadHelper(dType, style);

                //add captions
                d.AddCaptions(new List<string> { "Name", "User Name", "CURRENT Membership Type", "Credit Card #", "Transaction ID", "Amount", "Transaction Date", "Transaction Type","Purchased Item(s)" });

                //add data
                foreach (var item in model)
                {
                    d.AddDataRow(new List<string> {
                    item.MembershipLastName + ", " + item.MembershipFirstName
                ,item.MembershipUserName
                ,(item.CurrentSubscribeEndDate>DateTime.Now) ? item.CurrentSubscribeTitle : ""
                ,"xxxx-xxxx-xxxx-"+item.CardID
                ,item.TransactionID.ToString()
                ,item.Amount!=null?"$"+item.Amount.Value.ToString("F2"):string.Empty
                ,item.TransactionDate.ToString("MM/dd/yyyy hh:mm:ss")
                ,string.Join(", ", item.TransactionType.Split('_'))
                ,string.Join(", ", item.ProductTypes.Distinct().Select(t=>t.ToString()).ToArray())
                });
                }

                return File(d.RetrieveBytes(), d.ContentType, string.Format("{0}." + d.Extension, "SuccessfulTransactions"));
            }

            int recordsCount = _shoppingService.GetShoppingTransactionsCnt(filter.fsincedata, filter.fbeforedata, tranState, tranType);
            var model = _shoppingService.GetShoppingTransactions((p - 1) * ps, ps, filter.fsincedata, filter.fbeforedata, tranState, tranType);

            this.ViewData["Pager"] = new PagingData(Request.Path, Request.QueryString, recordsCount, ps, p, 1, 100);
            this.ViewData["Title"] = "Purchases";
            this.ViewData["Filter"] = filter;
            this.ViewData["TotalCount"] = recordsCount.ToString();

            return View("SuccessfulTransactionReport", model);

        }
        //[PortalAuthorize(Roles = UserRoles.SUPERUSER_ROLE)]
        //public ActionResult ReportPurchasesDownload(Main.Areas.Admin.Models.ControllerView.Transaction.ShoppingTransactionsFilter filter, int ps = 100, int p = 1)
        //{
            //var tranState = new[] { (short)ShoppingTransactionStateEnum.Prepaid, (short)ShoppingTransactionStateEnum.Complete };
            //var tranType = new[] { 
            //    ShoppingTransactionTypeEnum.purchase.ToString(),
            //    ShoppingTransactionTypeEnum.authorize_monthlyfee_purchase.ToString(), ShoppingTransactionTypeEnum.monthlyfee_purchase.ToString() };

            //var model = _shoppingService.GetShoppingTransactions((p - 1) * ps, ps, filter.fsincedata, filter.fbeforedata, tranState, tranType);

            //this.ViewData["Title"] = "Purchases";
            //this.ViewData["Filter"] = filter;

            //return View("SuccessfulTransactionReport", model);

        //    return File(System.Text.Encoding.UTF8.GetBytes("test"),
        //         "application/ms-excel",
        //          string.Format("{0}.xls", 27));
        //}
        #endregion

        [PortalAuthorize(Roles = UserRoles.SUPERUSER_ROLE)]
        public ActionResult TransactionDetail(long transaction_id)
        {
            TransactionDetail model = null;
            base.ViewData["TransactioID"] = transaction_id;

            var transaction = _shoppingService.GetShoppingTransaction(transaction_id);
            if (transaction != null)
            {
                var orders = _shoppingService.GetOrders(transaction.UserId, transaction_id);
                var addresess = _shoppingService.GetShoppingAddresses(new[] { transaction_id });

                model = new TransactionDetail(transaction, orders, addresess);
            }
            else model = new TransactionDetail();

            return View(model);
        }


        #region All Transactions
        [PortalAuthorize(Roles = UserRoles.SUPERUSER_ROLE)]
        public ActionResult AllTransactions(Main.Areas.Admin.Models.ControllerView.Transaction.ShoppingTransactionsFilter filter, int ps = 100, int p = 1)
        {
            int recordsCount = _shoppingService.GetShoppingTransactionsCnt(filter.fsincedata, filter.fbeforedata, null, null);
            var model = _shoppingService.GetShoppingTransactions((p - 1) * ps, ps, filter.fsincedata, filter.fbeforedata, null, null);

            this.ViewData["Pager"] = new PagingData(Request.Path, Request.QueryString, recordsCount, ps, p, 1, 100);
            this.ViewData["Title"] = "All";
            this.ViewData["Filter"] = filter;
            this.ViewData["TotalCount"] = recordsCount.ToString();

            return View("AllTransactions", model);
        }
        [PortalAuthorize(Roles = UserRoles.SUPERUSER_ROLE)]
        public ActionResult AllTransactionsDownloadExcel(ShoppingTransactionsFilter filter, int ps = 100, int p = 1)
        {
            //var model = _shoppingService.GetShoppingTransactionsAll();
            var model = _shoppingService.GetShoppingTransactions((p - 1) * ps, ps, filter.fsincedata, filter.fbeforedata, null, null);
            return AllTransactionsDownloadHelper(model, ps, p, DownloadHelper.DownloadType.excel);

            //StringBuilder sb = new StringBuilder();
            //sb.AppendLine(@"<div class=""hastable"">");
            //sb.AppendLine("<table>");
            //sb.AppendLine(" <thead>");
            //sb.AppendLine("     <tr>");
            //sb.AppendLine(@"         <th class=""header"">Customer Name</th>");
            //sb.AppendLine(@"         <th class=""header"">Credit Card (last 4 digits)</th>");
            //sb.AppendLine(@"         <th class=""header"">Transaction Date</th>");
            //sb.AppendLine(@"         <th class=""header"">Transaction Type</th>");
            //sb.AppendLine(@"         <th class=""header"">Subscription Type</th>");
            //sb.AppendLine(@"         <th class=""header"">Transaction ID</th>");
            //sb.AppendLine(@"         <th class=""header"">Amount</th>");
            //sb.AppendLine(@"         <th class=""header"">Response</th>");
            //sb.AppendLine("     </tr>");
            //sb.AppendLine(" </thead>");
            //sb.AppendLine("<tbody>");
            //foreach (var item in model)
            //{
            //    sb.AppendLine("<tr>");
            //    sb.AppendLine(@" <td style=""width:300px;"" >" + item.MembershipLastName + ", " + item.MembershipFirstName + "</td>");
            //    sb.AppendLine(@" <td style=""width:100px;text-align:center;"" >" + item.CardID + "</td>");
            //    sb.AppendLine(@" <td style=""width:100px;text-align:center;"" >" + item.TransactionDate.ToString("MM/dd/yyyy hh:mm:ss") + "</td>");
            //    sb.AppendLine(@" <td style=""width:200px;text-align:center;"" >" + string.Join(", ", item.TransactionType.Split('_')) + "</td>");
            //    sb.AppendLine(@" <td style=""width:90px;text-align:center;"" >" + item.CurrentSubscribeTitle + "</td>");
            //    sb.AppendLine(@" <td style=""width:80px;text-align:center;"" >" + item.TransactionID + "</td>");
            //    sb.AppendLine(@" <td style=""width:80px;text-align:center;"" >" + item.Amount != null ? "$" + item.Amount.Value.ToString("F2") : string.Empty + "</td>");
            //    sb.AppendLine(@" <td style=""width:100px;text-align:center;"" >" + item.Response + "</td>");
            //    sb.AppendLine("</tr>");
            //}
            //sb.AppendLine("</tbody>");
            //sb.AppendLine("</table>");
            //sb.AppendLine("</div>");

            //return File(System.Text.Encoding.Default.GetBytes(sb.ToString()),
            //    "application/vnd.ms-excel",
            //    string.Format("{0}.xls", "AllTransactions"));

        }
        [PortalAuthorize(Roles = UserRoles.SUPERUSER_ROLE)]
        public ActionResult TransactionDetail(long transaction_id)
        {
            TransactionDetail model = null;
            base.ViewData["TransactioID"] = transaction_id;

            var transaction = _shoppingService.GetShoppingTransaction(transaction_id);
            if (transaction != null)
            {
                var orders = _shoppingService.GetOrders(transaction.UserId, transaction_id);
                var addresess = _shoppingService.GetShoppingAddresses(new[] { transaction_id });

                model = new TransactionDetail(transaction, orders, addresess);
            }
            else model = new TransactionDetail();

            return View(model);
        }

    }
}
