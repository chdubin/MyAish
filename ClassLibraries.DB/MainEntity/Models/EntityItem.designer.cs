#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MainEntity.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Aisha")]
	public partial class EntityItemDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEntityItem(MainEntity.Models.Entity.EntityItem instance);
    partial void UpdateEntityItem(MainEntity.Models.Entity.EntityItem instance);
    partial void DeleteEntityItem(MainEntity.Models.Entity.EntityItem instance);
    partial void InsertEntityType(MainEntity.Models.Entity.EntityType instance);
    partial void UpdateEntityType(MainEntity.Models.Entity.EntityType instance);
    partial void DeleteEntityType(MainEntity.Models.Entity.EntityType instance);
    partial void InsertFileEntity(MainEntity.Models.Entity.FileEntity instance);
    partial void UpdateFileEntity(MainEntity.Models.Entity.FileEntity instance);
    partial void DeleteFileEntity(MainEntity.Models.Entity.FileEntity instance);
    #endregion
		
		public EntityItemDataContext() : 
				base(global::MainEntity.Properties.Settings.Default.AishaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EntityItemDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntityItemDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntityItemDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntityItemDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MainEntity.Models.Entity.EntityItem> EntityItems
		{
			get
			{
				return this.GetTable<MainEntity.Models.Entity.EntityItem>();
			}
		}
		
		public System.Data.Linq.Table<MainEntity.Models.Entity.EntityType> EntityTypes
		{
			get
			{
				return this.GetTable<MainEntity.Models.Entity.EntityType>();
			}
		}
		
		public System.Data.Linq.Table<MainEntity.Models.Entity.FileEntity> FileEntities
		{
			get
			{
				return this.GetTable<MainEntity.Models.Entity.FileEntity>();
			}
		}
	}
}
namespace MainEntity.Models.Entity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityItem")]
	public partial class EntityItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _entityID;
		
		private long _rootEntityID;
		
		private long _parentEntityID;
		
		private int _typeID;
		
		private System.Guid _creatorID;
		
		private string _hierarchiID;
		
		private string _title;
		
		private int _sortOrder;
		
		private System.DateTime _createDate;
		
		private bool _deleted;
		
		private bool _active;
		
		private EntityRef<FileEntity> _FileEntity;
		
		private EntityRef<EntityType> _EntityType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnentityIDChanging(long value);
    partial void OnentityIDChanged();
    partial void OnrootEntityIDChanging(long value);
    partial void OnrootEntityIDChanged();
    partial void OnparentEntityIDChanging(long value);
    partial void OnparentEntityIDChanged();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OncreatorIDChanging(System.Guid value);
    partial void OncreatorIDChanged();
    partial void OnhierarchiIDChanging(string value);
    partial void OnhierarchiIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnsortOrderChanging(int value);
    partial void OnsortOrderChanged();
    partial void OncreateDateChanging(System.DateTime value);
    partial void OncreateDateChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public EntityItem()
		{
			this._FileEntity = default(EntityRef<FileEntity>);
			this._EntityType = default(EntityRef<EntityType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entityID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long entityID
		{
			get
			{
				return this._entityID;
			}
			set
			{
				if ((this._entityID != value))
				{
					this.OnentityIDChanging(value);
					this.SendPropertyChanging();
					this._entityID = value;
					this.SendPropertyChanged("entityID");
					this.OnentityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rootEntityID", DbType="BigInt NOT NULL")]
		public long rootEntityID
		{
			get
			{
				return this._rootEntityID;
			}
			set
			{
				if ((this._rootEntityID != value))
				{
					this.OnrootEntityIDChanging(value);
					this.SendPropertyChanging();
					this._rootEntityID = value;
					this.SendPropertyChanged("rootEntityID");
					this.OnrootEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentEntityID", DbType="BigInt NOT NULL")]
		public long parentEntityID
		{
			get
			{
				return this._parentEntityID;
			}
			set
			{
				if ((this._parentEntityID != value))
				{
					this.OnparentEntityIDChanging(value);
					this.SendPropertyChanging();
					this._parentEntityID = value;
					this.SendPropertyChanged("parentEntityID");
					this.OnparentEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int NOT NULL")]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					if (this._EntityType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creatorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid creatorID
		{
			get
			{
				return this._creatorID;
			}
			set
			{
				if ((this._creatorID != value))
				{
					this.OncreatorIDChanging(value);
					this.SendPropertyChanging();
					this._creatorID = value;
					this.SendPropertyChanged("creatorID");
					this.OncreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hierarchiID", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string hierarchiID
		{
			get
			{
				return this._hierarchiID;
			}
			set
			{
				if ((this._hierarchiID != value))
				{
					this.OnhierarchiIDChanging(value);
					this.SendPropertyChanging();
					this._hierarchiID = value;
					this.SendPropertyChanged("hierarchiID");
					this.OnhierarchiIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortOrder", DbType="Int NOT NULL")]
		public int sortOrder
		{
			get
			{
				return this._sortOrder;
			}
			set
			{
				if ((this._sortOrder != value))
				{
					this.OnsortOrderChanging(value);
					this.SendPropertyChanging();
					this._sortOrder = value;
					this.SendPropertyChanged("sortOrder");
					this.OnsortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime createDate
		{
			get
			{
				return this._createDate;
			}
			set
			{
				if ((this._createDate != value))
				{
					this.OncreateDateChanging(value);
					this.SendPropertyChanging();
					this._createDate = value;
					this.SendPropertyChanged("createDate");
					this.OncreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_FileEntity", Storage="_FileEntity", ThisKey="entityID", OtherKey="fileID", IsUnique=true, IsForeignKey=false)]
		public FileEntity FileEntity
		{
			get
			{
				return this._FileEntity.Entity;
			}
			set
			{
				FileEntity previousValue = this._FileEntity.Entity;
				if (((previousValue != value) 
							|| (this._FileEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileEntity.Entity = null;
						previousValue.EntityItem = null;
					}
					this._FileEntity.Entity = value;
					if ((value != null))
					{
						value.EntityItem = this;
					}
					this.SendPropertyChanged("FileEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityType_EntityItem", Storage="_EntityType", ThisKey="typeID", OtherKey="typeID", IsForeignKey=true)]
		public EntityType EntityType
		{
			get
			{
				return this._EntityType.Entity;
			}
			set
			{
				EntityType previousValue = this._EntityType.Entity;
				if (((previousValue != value) 
							|| (this._EntityType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityType.Entity = null;
						previousValue.EntityItems.Remove(this);
					}
					this._EntityType.Entity = value;
					if ((value != null))
					{
						value.EntityItems.Add(this);
						this._typeID = value.typeID;
					}
					else
					{
						this._typeID = default(int);
					}
					this.SendPropertyChanged("EntityType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityType")]
	public partial class EntityType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _typeID;
		
		private string _name;
		
		private EntitySet<EntityItem> _EntityItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public EntityType()
		{
			this._EntityItems = new EntitySet<EntityItem>(new Action<EntityItem>(this.attach_EntityItems), new Action<EntityItem>(this.detach_EntityItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(256)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityType_EntityItem", Storage="_EntityItems", ThisKey="typeID", OtherKey="typeID")]
		public EntitySet<EntityItem> EntityItems
		{
			get
			{
				return this._EntityItems;
			}
			set
			{
				this._EntityItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntityItems(EntityItem entity)
		{
			this.SendPropertyChanging();
			entity.EntityType = this;
		}
		
		private void detach_EntityItems(EntityItem entity)
		{
			this.SendPropertyChanging();
			entity.EntityType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileEntity")]
	public partial class FileEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _fileID;
		
		private short _fileTypeID;
		
		private string _filePath;
		
		private string _alternateFilePath;
		
		private EntityRef<EntityItem> _EntityItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfileIDChanging(long value);
    partial void OnfileIDChanged();
    partial void OnfileTypeIDChanging(short value);
    partial void OnfileTypeIDChanged();
    partial void OnfilePathChanging(string value);
    partial void OnfilePathChanged();
    partial void OnalternateFilePathChanging(string value);
    partial void OnalternateFilePathChanged();
    #endregion
		
		public FileEntity()
		{
			this._EntityItem = default(EntityRef<EntityItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long fileID
		{
			get
			{
				return this._fileID;
			}
			set
			{
				if ((this._fileID != value))
				{
					if (this._EntityItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfileIDChanging(value);
					this.SendPropertyChanging();
					this._fileID = value;
					this.SendPropertyChanged("fileID");
					this.OnfileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileTypeID", DbType="SmallInt NOT NULL")]
		public short fileTypeID
		{
			get
			{
				return this._fileTypeID;
			}
			set
			{
				if ((this._fileTypeID != value))
				{
					this.OnfileTypeIDChanging(value);
					this.SendPropertyChanging();
					this._fileTypeID = value;
					this.SendPropertyChanged("fileTypeID");
					this.OnfileTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filePath", DbType="NVarChar(2048)")]
		public string filePath
		{
			get
			{
				return this._filePath;
			}
			set
			{
				if ((this._filePath != value))
				{
					this.OnfilePathChanging(value);
					this.SendPropertyChanging();
					this._filePath = value;
					this.SendPropertyChanged("filePath");
					this.OnfilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alternateFilePath", DbType="NVarChar(2048)")]
		public string alternateFilePath
		{
			get
			{
				return this._alternateFilePath;
			}
			set
			{
				if ((this._alternateFilePath != value))
				{
					this.OnalternateFilePathChanging(value);
					this.SendPropertyChanging();
					this._alternateFilePath = value;
					this.SendPropertyChanged("alternateFilePath");
					this.OnalternateFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_FileEntity", Storage="_EntityItem", ThisKey="fileID", OtherKey="entityID", IsForeignKey=true)]
		public EntityItem EntityItem
		{
			get
			{
				return this._EntityItem.Entity;
			}
			set
			{
				EntityItem previousValue = this._EntityItem.Entity;
				if (((previousValue != value) 
							|| (this._EntityItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityItem.Entity = null;
						previousValue.FileEntity = null;
					}
					this._EntityItem.Entity = value;
					if ((value != null))
					{
						value.FileEntity = this;
						this._fileID = value.entityID;
					}
					else
					{
						this._fileID = default(long);
					}
					this.SendPropertyChanged("EntityItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
