#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.235
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MainEntity.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Aisha_real")]
	public partial class PortalEntityDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEntityItem(MainEntity.Models.Portal.EntityItem instance);
    partial void UpdateEntityItem(MainEntity.Models.Portal.EntityItem instance);
    partial void DeleteEntityItem(MainEntity.Models.Portal.EntityItem instance);
    partial void InsertPortalAlias(MainEntity.Models.Portal.PortalAlias instance);
    partial void UpdatePortalAlias(MainEntity.Models.Portal.PortalAlias instance);
    partial void DeletePortalAlias(MainEntity.Models.Portal.PortalAlias instance);
    partial void InsertPortalUser(MainEntity.Models.Portal.PortalUser instance);
    partial void UpdatePortalUser(MainEntity.Models.Portal.PortalUser instance);
    partial void DeletePortalUser(MainEntity.Models.Portal.PortalUser instance);
    partial void InsertPortalEntity(MainEntity.Models.Portal.PortalEntity instance);
    partial void UpdatePortalEntity(MainEntity.Models.Portal.PortalEntity instance);
    partial void DeletePortalEntity(MainEntity.Models.Portal.PortalEntity instance);
    #endregion
		
		public PortalEntityDataContext() : 
				base(global::MainEntity.Properties.Settings.Default.Aisha_realConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public PortalEntityDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PortalEntityDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PortalEntityDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PortalEntityDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MainEntity.Models.Portal.EntityItem> EntityItems
		{
			get
			{
				return this.GetTable<MainEntity.Models.Portal.EntityItem>();
			}
		}
		
		public System.Data.Linq.Table<MainEntity.Models.Portal.PortalAlias> PortalAlias
		{
			get
			{
				return this.GetTable<MainEntity.Models.Portal.PortalAlias>();
			}
		}
		
		public System.Data.Linq.Table<MainEntity.Models.Portal.PortalUser> PortalUsers
		{
			get
			{
				return this.GetTable<MainEntity.Models.Portal.PortalUser>();
			}
		}
		
		public System.Data.Linq.Table<MainEntity.Models.Portal.PortalEntity> PortalEntities
		{
			get
			{
				return this.GetTable<MainEntity.Models.Portal.PortalEntity>();
			}
		}
	}
}
namespace MainEntity.Models.Portal
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityItem")]
	public partial class EntityItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _entityID;
		
		private long _rootEntityID;
		
		private long _parentEntityID;
		
		private int _typeID;
		
		private System.Guid _creatorID;
		
		private string _hierarchiID;
		
		private string _title;
		
		private int _sortOrder;
		
		private System.DateTime _createDate;
		
		private bool _deleted;
		
		private bool _active;
		
		private EntitySet<PortalAlias> _PortalAlias;
		
		private EntityRef<PortalEntity> _PortalEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnentityIDChanging(long value);
    partial void OnentityIDChanged();
    partial void OnrootEntityIDChanging(long value);
    partial void OnrootEntityIDChanged();
    partial void OnparentEntityIDChanging(long value);
    partial void OnparentEntityIDChanged();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OncreatorIDChanging(System.Guid value);
    partial void OncreatorIDChanged();
    partial void OnhierarchiIDChanging(string value);
    partial void OnhierarchiIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnsortOrderChanging(int value);
    partial void OnsortOrderChanged();
    partial void OncreateDateChanging(System.DateTime value);
    partial void OncreateDateChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public EntityItem()
		{
			this._PortalAlias = new EntitySet<PortalAlias>(new Action<PortalAlias>(this.attach_PortalAlias), new Action<PortalAlias>(this.detach_PortalAlias));
			this._PortalEntity = default(EntityRef<PortalEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entityID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long entityID
		{
			get
			{
				return this._entityID;
			}
			set
			{
				if ((this._entityID != value))
				{
					this.OnentityIDChanging(value);
					this.SendPropertyChanging();
					this._entityID = value;
					this.SendPropertyChanged("entityID");
					this.OnentityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rootEntityID", DbType="BigInt NOT NULL")]
		public long rootEntityID
		{
			get
			{
				return this._rootEntityID;
			}
			set
			{
				if ((this._rootEntityID != value))
				{
					this.OnrootEntityIDChanging(value);
					this.SendPropertyChanging();
					this._rootEntityID = value;
					this.SendPropertyChanged("rootEntityID");
					this.OnrootEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentEntityID", DbType="BigInt NOT NULL")]
		public long parentEntityID
		{
			get
			{
				return this._parentEntityID;
			}
			set
			{
				if ((this._parentEntityID != value))
				{
					this.OnparentEntityIDChanging(value);
					this.SendPropertyChanging();
					this._parentEntityID = value;
					this.SendPropertyChanged("parentEntityID");
					this.OnparentEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int NOT NULL")]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creatorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid creatorID
		{
			get
			{
				return this._creatorID;
			}
			set
			{
				if ((this._creatorID != value))
				{
					this.OncreatorIDChanging(value);
					this.SendPropertyChanging();
					this._creatorID = value;
					this.SendPropertyChanged("creatorID");
					this.OncreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hierarchiID", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string hierarchiID
		{
			get
			{
				return this._hierarchiID;
			}
			set
			{
				if ((this._hierarchiID != value))
				{
					this.OnhierarchiIDChanging(value);
					this.SendPropertyChanging();
					this._hierarchiID = value;
					this.SendPropertyChanged("hierarchiID");
					this.OnhierarchiIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortOrder", DbType="Int NOT NULL")]
		public int sortOrder
		{
			get
			{
				return this._sortOrder;
			}
			set
			{
				if ((this._sortOrder != value))
				{
					this.OnsortOrderChanging(value);
					this.SendPropertyChanging();
					this._sortOrder = value;
					this.SendPropertyChanged("sortOrder");
					this.OnsortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime createDate
		{
			get
			{
				return this._createDate;
			}
			set
			{
				if ((this._createDate != value))
				{
					this.OncreateDateChanging(value);
					this.SendPropertyChanging();
					this._createDate = value;
					this.SendPropertyChanged("createDate");
					this.OncreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_PortalAlias", Storage="_PortalAlias", ThisKey="entityID", OtherKey="portalID")]
		public EntitySet<PortalAlias> PortalAlias
		{
			get
			{
				return this._PortalAlias;
			}
			set
			{
				this._PortalAlias.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_PortalEntity", Storage="_PortalEntity", ThisKey="entityID", OtherKey="portalID", IsUnique=true, IsForeignKey=false)]
		public PortalEntity PortalEntity
		{
			get
			{
				return this._PortalEntity.Entity;
			}
			set
			{
				PortalEntity previousValue = this._PortalEntity.Entity;
				if (((previousValue != value) 
							|| (this._PortalEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PortalEntity.Entity = null;
						previousValue.EntityItem = null;
					}
					this._PortalEntity.Entity = value;
					if ((value != null))
					{
						value.EntityItem = this;
					}
					this.SendPropertyChanged("PortalEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PortalAlias(PortalAlias entity)
		{
			this.SendPropertyChanging();
			entity.EntityItem = this;
		}
		
		private void detach_PortalAlias(PortalAlias entity)
		{
			this.SendPropertyChanging();
			entity.EntityItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PortalAlias")]
	public partial class PortalAlias : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _portalAliasID;
		
		private long _portalID;
		
		private string _alias;
		
		private EntityRef<EntityItem> _EntityItem;
		
		private EntityRef<PortalEntity> _PortalEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnportalAliasIDChanging(int value);
    partial void OnportalAliasIDChanged();
    partial void OnportalIDChanging(long value);
    partial void OnportalIDChanged();
    partial void OnaliasChanging(string value);
    partial void OnaliasChanged();
    #endregion
		
		public PortalAlias()
		{
			this._EntityItem = default(EntityRef<EntityItem>);
			this._PortalEntity = default(EntityRef<PortalEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_portalAliasID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int portalAliasID
		{
			get
			{
				return this._portalAliasID;
			}
			set
			{
				if ((this._portalAliasID != value))
				{
					this.OnportalAliasIDChanging(value);
					this.SendPropertyChanging();
					this._portalAliasID = value;
					this.SendPropertyChanged("portalAliasID");
					this.OnportalAliasIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_portalID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long portalID
		{
			get
			{
				return this._portalID;
			}
			set
			{
				if ((this._portalID != value))
				{
					if ((this._EntityItem.HasLoadedOrAssignedValue || this._PortalEntity.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnportalIDChanging(value);
					this.SendPropertyChanging();
					this._portalID = value;
					this.SendPropertyChanged("portalID");
					this.OnportalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alias", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string alias
		{
			get
			{
				return this._alias;
			}
			set
			{
				if ((this._alias != value))
				{
					this.OnaliasChanging(value);
					this.SendPropertyChanging();
					this._alias = value;
					this.SendPropertyChanged("alias");
					this.OnaliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_PortalAlias", Storage="_EntityItem", ThisKey="portalID", OtherKey="entityID", IsForeignKey=true)]
		public EntityItem EntityItem
		{
			get
			{
				return this._EntityItem.Entity;
			}
			set
			{
				EntityItem previousValue = this._EntityItem.Entity;
				if (((previousValue != value) 
							|| (this._EntityItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityItem.Entity = null;
						previousValue.PortalAlias.Remove(this);
					}
					this._EntityItem.Entity = value;
					if ((value != null))
					{
						value.PortalAlias.Add(this);
						this._portalID = value.entityID;
					}
					else
					{
						this._portalID = default(long);
					}
					this.SendPropertyChanged("EntityItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PortalEntity_PortalAlias", Storage="_PortalEntity", ThisKey="portalID", OtherKey="portalID", IsForeignKey=true)]
		public PortalEntity PortalEntity
		{
			get
			{
				return this._PortalEntity.Entity;
			}
			set
			{
				PortalEntity previousValue = this._PortalEntity.Entity;
				if (((previousValue != value) 
							|| (this._PortalEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PortalEntity.Entity = null;
						previousValue.PortalAlias.Remove(this);
					}
					this._PortalEntity.Entity = value;
					if ((value != null))
					{
						value.PortalAlias.Add(this);
						this._portalID = value.portalID;
					}
					else
					{
						this._portalID = default(long);
					}
					this.SendPropertyChanged("PortalEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PortalUser")]
	public partial class PortalUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private long _portalID;
		
		private EntityRef<PortalEntity> _PortalEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnportalIDChanging(long value);
    partial void OnportalIDChanged();
    #endregion
		
		public PortalUser()
		{
			this._PortalEntity = default(EntityRef<PortalEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_portalID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long portalID
		{
			get
			{
				return this._portalID;
			}
			set
			{
				if ((this._portalID != value))
				{
					if (this._PortalEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnportalIDChanging(value);
					this.SendPropertyChanging();
					this._portalID = value;
					this.SendPropertyChanged("portalID");
					this.OnportalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PortalEntity_PortalUser", Storage="_PortalEntity", ThisKey="portalID", OtherKey="portalID", IsForeignKey=true)]
		public PortalEntity PortalEntity
		{
			get
			{
				return this._PortalEntity.Entity;
			}
			set
			{
				PortalEntity previousValue = this._PortalEntity.Entity;
				if (((previousValue != value) 
							|| (this._PortalEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PortalEntity.Entity = null;
						previousValue.PortalUsers.Remove(this);
					}
					this._PortalEntity.Entity = value;
					if ((value != null))
					{
						value.PortalUsers.Add(this);
						this._portalID = value.portalID;
					}
					else
					{
						this._portalID = default(long);
					}
					this.SendPropertyChanged("PortalEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PortalEntity")]
	public partial class PortalEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _portalID;
		
		private string _themeName;
		
		private string _applicationName;
		
		private bool _authorizedOnly;
		
		private bool _allowBuyFiles;
		
		private bool _allowBuyProducts;
		
		private bool _allowRegister;
		
		private bool _allowAuthorize;
		
		private string _passwordProtection;
		
		private EntitySet<PortalAlias> _PortalAlias;
		
		private EntitySet<PortalUser> _PortalUsers;
		
		private EntityRef<EntityItem> _EntityItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnportalIDChanging(long value);
    partial void OnportalIDChanged();
    partial void OnthemeNameChanging(string value);
    partial void OnthemeNameChanged();
    partial void OnapplicationNameChanging(string value);
    partial void OnapplicationNameChanged();
    partial void OnauthorizedOnlyChanging(bool value);
    partial void OnauthorizedOnlyChanged();
    partial void OnallowBuyFilesChanging(bool value);
    partial void OnallowBuyFilesChanged();
    partial void OnallowBuyProductsChanging(bool value);
    partial void OnallowBuyProductsChanged();
    partial void OnallowRegisterChanging(bool value);
    partial void OnallowRegisterChanged();
    partial void OnallowAuthorizeChanging(bool value);
    partial void OnallowAuthorizeChanged();
    partial void OnpasswordProtectionChanging(string value);
    partial void OnpasswordProtectionChanged();
    #endregion
		
		public PortalEntity()
		{
			this._PortalAlias = new EntitySet<PortalAlias>(new Action<PortalAlias>(this.attach_PortalAlias), new Action<PortalAlias>(this.detach_PortalAlias));
			this._PortalUsers = new EntitySet<PortalUser>(new Action<PortalUser>(this.attach_PortalUsers), new Action<PortalUser>(this.detach_PortalUsers));
			this._EntityItem = default(EntityRef<EntityItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_portalID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long portalID
		{
			get
			{
				return this._portalID;
			}
			set
			{
				if ((this._portalID != value))
				{
					if (this._EntityItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnportalIDChanging(value);
					this.SendPropertyChanging();
					this._portalID = value;
					this.SendPropertyChanged("portalID");
					this.OnportalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_themeName", DbType="NVarChar(256)")]
		public string themeName
		{
			get
			{
				return this._themeName;
			}
			set
			{
				if ((this._themeName != value))
				{
					this.OnthemeNameChanging(value);
					this.SendPropertyChanging();
					this._themeName = value;
					this.SendPropertyChanged("themeName");
					this.OnthemeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_applicationName", DbType="NVarChar(256)")]
		public string applicationName
		{
			get
			{
				return this._applicationName;
			}
			set
			{
				if ((this._applicationName != value))
				{
					this.OnapplicationNameChanging(value);
					this.SendPropertyChanging();
					this._applicationName = value;
					this.SendPropertyChanged("applicationName");
					this.OnapplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_authorizedOnly", DbType="Bit NOT NULL")]
		public bool authorizedOnly
		{
			get
			{
				return this._authorizedOnly;
			}
			set
			{
				if ((this._authorizedOnly != value))
				{
					this.OnauthorizedOnlyChanging(value);
					this.SendPropertyChanging();
					this._authorizedOnly = value;
					this.SendPropertyChanged("authorizedOnly");
					this.OnauthorizedOnlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_allowBuyFiles", DbType="Bit NOT NULL")]
		public bool allowBuyFiles
		{
			get
			{
				return this._allowBuyFiles;
			}
			set
			{
				if ((this._allowBuyFiles != value))
				{
					this.OnallowBuyFilesChanging(value);
					this.SendPropertyChanging();
					this._allowBuyFiles = value;
					this.SendPropertyChanged("allowBuyFiles");
					this.OnallowBuyFilesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_allowBuyProducts", DbType="Bit NOT NULL")]
		public bool allowBuyProducts
		{
			get
			{
				return this._allowBuyProducts;
			}
			set
			{
				if ((this._allowBuyProducts != value))
				{
					this.OnallowBuyProductsChanging(value);
					this.SendPropertyChanging();
					this._allowBuyProducts = value;
					this.SendPropertyChanged("allowBuyProducts");
					this.OnallowBuyProductsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_allowRegister", DbType="Bit NOT NULL")]
		public bool allowRegister
		{
			get
			{
				return this._allowRegister;
			}
			set
			{
				if ((this._allowRegister != value))
				{
					this.OnallowRegisterChanging(value);
					this.SendPropertyChanging();
					this._allowRegister = value;
					this.SendPropertyChanged("allowRegister");
					this.OnallowRegisterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_allowAuthorize", DbType="Bit NOT NULL")]
		public bool allowAuthorize
		{
			get
			{
				return this._allowAuthorize;
			}
			set
			{
				if ((this._allowAuthorize != value))
				{
					this.OnallowAuthorizeChanging(value);
					this.SendPropertyChanging();
					this._allowAuthorize = value;
					this.SendPropertyChanged("allowAuthorize");
					this.OnallowAuthorizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_passwordProtection", DbType="NVarChar(128)")]
		public string passwordProtection
		{
			get
			{
				return this._passwordProtection;
			}
			set
			{
				if ((this._passwordProtection != value))
				{
					this.OnpasswordProtectionChanging(value);
					this.SendPropertyChanging();
					this._passwordProtection = value;
					this.SendPropertyChanged("passwordProtection");
					this.OnpasswordProtectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PortalEntity_PortalAlias", Storage="_PortalAlias", ThisKey="portalID", OtherKey="portalID")]
		public EntitySet<PortalAlias> PortalAlias
		{
			get
			{
				return this._PortalAlias;
			}
			set
			{
				this._PortalAlias.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PortalEntity_PortalUser", Storage="_PortalUsers", ThisKey="portalID", OtherKey="portalID")]
		public EntitySet<PortalUser> PortalUsers
		{
			get
			{
				return this._PortalUsers;
			}
			set
			{
				this._PortalUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_PortalEntity", Storage="_EntityItem", ThisKey="portalID", OtherKey="entityID", IsForeignKey=true)]
		public EntityItem EntityItem
		{
			get
			{
				return this._EntityItem.Entity;
			}
			set
			{
				EntityItem previousValue = this._EntityItem.Entity;
				if (((previousValue != value) 
							|| (this._EntityItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityItem.Entity = null;
						previousValue.PortalEntity = null;
					}
					this._EntityItem.Entity = value;
					if ((value != null))
					{
						value.PortalEntity = this;
						this._portalID = value.entityID;
					}
					else
					{
						this._portalID = default(long);
					}
					this.SendPropertyChanged("EntityItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PortalAlias(PortalAlias entity)
		{
			this.SendPropertyChanging();
			entity.PortalEntity = this;
		}
		
		private void detach_PortalAlias(PortalAlias entity)
		{
			this.SendPropertyChanging();
			entity.PortalEntity = null;
		}
		
		private void attach_PortalUsers(PortalUser entity)
		{
			this.SendPropertyChanging();
			entity.PortalEntity = this;
		}
		
		private void detach_PortalUsers(PortalUser entity)
		{
			this.SendPropertyChanging();
			entity.PortalEntity = null;
		}
	}
}
#pragma warning restore 1591
