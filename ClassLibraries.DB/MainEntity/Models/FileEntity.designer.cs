#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.1
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MainEntity.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Aisha")]
	public partial class FileEntityDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertEntityItem(MainEntity.Models.File.EntityItem instance);
    partial void UpdateEntityItem(MainEntity.Models.File.EntityItem instance);
    partial void DeleteEntityItem(MainEntity.Models.File.EntityItem instance);
    partial void InsertClassEntity(MainEntity.Models.File.ClassEntity instance);
    partial void UpdateClassEntity(MainEntity.Models.File.ClassEntity instance);
    partial void DeleteClassEntity(MainEntity.Models.File.ClassEntity instance);
    partial void InsertCatalogItemExtend(MainEntity.Models.File.CatalogItemExtend instance);
    partial void UpdateCatalogItemExtend(MainEntity.Models.File.CatalogItemExtend instance);
    partial void DeleteCatalogItemExtend(MainEntity.Models.File.CatalogItemExtend instance);
    partial void InsertFileEntity(MainEntity.Models.File.FileEntity instance);
    partial void UpdateFileEntity(MainEntity.Models.File.FileEntity instance);
    partial void DeleteFileEntity(MainEntity.Models.File.FileEntity instance);
    partial void InsertCatalogItemXrefPortal(MainEntity.Models.File.CatalogItemXrefPortal instance);
    partial void UpdateCatalogItemXrefPortal(MainEntity.Models.File.CatalogItemXrefPortal instance);
    partial void DeleteCatalogItemXrefPortal(MainEntity.Models.File.CatalogItemXrefPortal instance);
    #endregion
		
		public FileEntityDataContext() : 
				base(global::MainEntity.Properties.Settings.Default.AishaConnectionString4, mappingSource)
		{
			OnCreated();
		}
		
		public FileEntityDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FileEntityDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FileEntityDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FileEntityDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MainEntity.Models.File.EntityItem> EntityItems
		{
			get
			{
				return this.GetTable<MainEntity.Models.File.EntityItem>();
			}
		}
		
		public System.Data.Linq.Table<MainEntity.Models.File.ClassEntity> ClassEntities
		{
			get
			{
				return this.GetTable<MainEntity.Models.File.ClassEntity>();
			}
		}
		
		public System.Data.Linq.Table<MainEntity.Models.File.CatalogItemExtend> CatalogItemExtends
		{
			get
			{
				return this.GetTable<MainEntity.Models.File.CatalogItemExtend>();
			}
		}
		
		public System.Data.Linq.Table<MainEntity.Models.File.FileEntity> FileEntities
		{
			get
			{
				return this.GetTable<MainEntity.Models.File.FileEntity>();
			}
		}
		
		public System.Data.Linq.Table<MainEntity.Models.File.CatalogItemXrefPortal> CatalogItemXrefPortals
		{
			get
			{
				return this.GetTable<MainEntity.Models.File.CatalogItemXrefPortal>();
			}
		}
	}
}
namespace MainEntity.Models.File
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityItem")]
	public partial class EntityItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _entityID;
		
		private long _rootEntityID;
		
		private long _parentEntityID;
		
		private int _typeID;
		
		private System.Guid _creatorID;
		
		private string _hierarchiID;
		
		private string _title;
		
		private int _sortOrder;
		
		private System.DateTime _createDate;
		
		private bool _deleted;
		
		private bool _active;
		
		private EntityRef<ClassEntity> _FileClassEntity;
		
		private EntitySet<ClassEntity> _ClassEntities;
		
		private EntityRef<FileEntity> _FileEntity;
		
		private EntitySet<CatalogItemXrefPortal> _CatalogItemXrefPortals;
		
		private EntityRef<ClassEntity> _ClassEntity;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnentityIDChanging(long value);
    partial void OnentityIDChanged();
    partial void OnrootEntityIDChanging(long value);
    partial void OnrootEntityIDChanged();
    partial void OnparentEntityIDChanging(long value);
    partial void OnparentEntityIDChanged();
    partial void OntypeIDChanging(int value);
    partial void OntypeIDChanged();
    partial void OncreatorIDChanging(System.Guid value);
    partial void OncreatorIDChanged();
    partial void OnhierarchiIDChanging(string value);
    partial void OnhierarchiIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OnsortOrderChanging(int value);
    partial void OnsortOrderChanged();
    partial void OncreateDateChanging(System.DateTime value);
    partial void OncreateDateChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    partial void OnactiveChanging(bool value);
    partial void OnactiveChanged();
    #endregion
		
		public EntityItem()
		{
			this._FileClassEntity = default(EntityRef<ClassEntity>);
			this._ClassEntities = new EntitySet<ClassEntity>(new Action<ClassEntity>(this.attach_ClassEntities), new Action<ClassEntity>(this.detach_ClassEntities));
			this._FileEntity = default(EntityRef<FileEntity>);
			this._CatalogItemXrefPortals = new EntitySet<CatalogItemXrefPortal>(new Action<CatalogItemXrefPortal>(this.attach_CatalogItemXrefPortals), new Action<CatalogItemXrefPortal>(this.detach_CatalogItemXrefPortals));
			this._ClassEntity = default(EntityRef<ClassEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entityID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long entityID
		{
			get
			{
				return this._entityID;
			}
			set
			{
				if ((this._entityID != value))
				{
					if (this._ClassEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnentityIDChanging(value);
					this.SendPropertyChanging();
					this._entityID = value;
					this.SendPropertyChanged("entityID");
					this.OnentityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rootEntityID", DbType="BigInt NOT NULL")]
		public long rootEntityID
		{
			get
			{
				return this._rootEntityID;
			}
			set
			{
				if ((this._rootEntityID != value))
				{
					this.OnrootEntityIDChanging(value);
					this.SendPropertyChanging();
					this._rootEntityID = value;
					this.SendPropertyChanged("rootEntityID");
					this.OnrootEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_parentEntityID", DbType="BigInt NOT NULL")]
		public long parentEntityID
		{
			get
			{
				return this._parentEntityID;
			}
			set
			{
				if ((this._parentEntityID != value))
				{
					this.OnparentEntityIDChanging(value);
					this.SendPropertyChanging();
					this._parentEntityID = value;
					this.SendPropertyChanged("parentEntityID");
					this.OnparentEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_typeID", DbType="Int NOT NULL")]
		public int typeID
		{
			get
			{
				return this._typeID;
			}
			set
			{
				if ((this._typeID != value))
				{
					this.OntypeIDChanging(value);
					this.SendPropertyChanging();
					this._typeID = value;
					this.SendPropertyChanged("typeID");
					this.OntypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creatorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid creatorID
		{
			get
			{
				return this._creatorID;
			}
			set
			{
				if ((this._creatorID != value))
				{
					this.OncreatorIDChanging(value);
					this.SendPropertyChanging();
					this._creatorID = value;
					this.SendPropertyChanged("creatorID");
					this.OncreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hierarchiID", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string hierarchiID
		{
			get
			{
				return this._hierarchiID;
			}
			set
			{
				if ((this._hierarchiID != value))
				{
					this.OnhierarchiIDChanging(value);
					this.SendPropertyChanging();
					this._hierarchiID = value;
					this.SendPropertyChanged("hierarchiID");
					this.OnhierarchiIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(512) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sortOrder", DbType="Int NOT NULL")]
		public int sortOrder
		{
			get
			{
				return this._sortOrder;
			}
			set
			{
				if ((this._sortOrder != value))
				{
					this.OnsortOrderChanging(value);
					this.SendPropertyChanging();
					this._sortOrder = value;
					this.SendPropertyChanged("sortOrder");
					this.OnsortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createDate", DbType="DateTime2 NOT NULL")]
		public System.DateTime createDate
		{
			get
			{
				return this._createDate;
			}
			set
			{
				if ((this._createDate != value))
				{
					this.OncreateDateChanging(value);
					this.SendPropertyChanging();
					this._createDate = value;
					this.SendPropertyChanged("createDate");
					this.OncreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_active", DbType="Bit NOT NULL")]
		public bool active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_ClassEntity", Storage="_FileClassEntity", ThisKey="parentEntityID", OtherKey="classID", IsUnique=true, IsForeignKey=false)]
		public ClassEntity FileClassEntity
		{
			get
			{
				return this._FileClassEntity.Entity;
			}
			set
			{
				ClassEntity previousValue = this._FileClassEntity.Entity;
				if (((previousValue != value) 
							|| (this._FileClassEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileClassEntity.Entity = null;
						previousValue.EntityItem = null;
					}
					this._FileClassEntity.Entity = value;
					if ((value != null))
					{
						value.EntityItem = this;
					}
					this.SendPropertyChanged("FileClassEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_ClassEntity1", Storage="_ClassEntities", ThisKey="entityID", OtherKey="speakerID")]
		public EntitySet<ClassEntity> ClassEntities
		{
			get
			{
				return this._ClassEntities;
			}
			set
			{
				this._ClassEntities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_FileEntity", Storage="_FileEntity", ThisKey="entityID", OtherKey="fileID", IsUnique=true, IsForeignKey=false)]
		public FileEntity FileEntity
		{
			get
			{
				return this._FileEntity.Entity;
			}
			set
			{
				FileEntity previousValue = this._FileEntity.Entity;
				if (((previousValue != value) 
							|| (this._FileEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileEntity.Entity = null;
						previousValue.EntityItem = null;
					}
					this._FileEntity.Entity = value;
					if ((value != null))
					{
						value.EntityItem = this;
					}
					this.SendPropertyChanged("FileEntity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_CatalogItemXrefPortal", Storage="_CatalogItemXrefPortals", ThisKey="entityID", OtherKey="catalogItemID")]
		public EntitySet<CatalogItemXrefPortal> CatalogItemXrefPortals
		{
			get
			{
				return this._CatalogItemXrefPortals;
			}
			set
			{
				this._CatalogItemXrefPortals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassEntity_EntityItem", Storage="_ClassEntity", ThisKey="entityID", OtherKey="classID", IsForeignKey=true)]
		public ClassEntity ClassEntity
		{
			get
			{
				return this._ClassEntity.Entity;
			}
			set
			{
				ClassEntity previousValue = this._ClassEntity.Entity;
				if (((previousValue != value) 
							|| (this._ClassEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClassEntity.Entity = null;
						previousValue.ClassEntityItem = null;
					}
					this._ClassEntity.Entity = value;
					if ((value != null))
					{
						value.ClassEntityItem = this;
						this._entityID = value.classID;
					}
					else
					{
						this._entityID = default(long);
					}
					this.SendPropertyChanged("ClassEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClassEntities(ClassEntity entity)
		{
			this.SendPropertyChanging();
			entity.SpeakerEntityItem = this;
		}
		
		private void detach_ClassEntities(ClassEntity entity)
		{
			this.SendPropertyChanging();
			entity.SpeakerEntityItem = null;
		}
		
		private void attach_CatalogItemXrefPortals(CatalogItemXrefPortal entity)
		{
			this.SendPropertyChanging();
			entity.EntityItem = this;
		}
		
		private void detach_CatalogItemXrefPortals(CatalogItemXrefPortal entity)
		{
			this.SendPropertyChanging();
			entity.EntityItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClassEntity")]
	public partial class ClassEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _classID;
		
		private long _speakerID;
		
		private string _description;
		
		private System.Nullable<System.TimeSpan> _duration;
		
		private EntityRef<EntityItem> _ClassEntityItem;
		
		private EntityRef<CatalogItemExtend> _CatalogItemExtend;
		
		private EntityRef<EntityItem> _EntityItem;
		
		private EntityRef<EntityItem> _SpeakerEntityItem;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnclassIDChanging(long value);
    partial void OnclassIDChanged();
    partial void OnspeakerIDChanging(long value);
    partial void OnspeakerIDChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OndurationChanging(System.Nullable<System.TimeSpan> value);
    partial void OndurationChanged();
    #endregion
		
		public ClassEntity()
		{
			this._ClassEntityItem = default(EntityRef<EntityItem>);
			this._CatalogItemExtend = default(EntityRef<CatalogItemExtend>);
			this._EntityItem = default(EntityRef<EntityItem>);
			this._SpeakerEntityItem = default(EntityRef<EntityItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_classID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long classID
		{
			get
			{
				return this._classID;
			}
			set
			{
				if ((this._classID != value))
				{
					if (this._EntityItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassIDChanging(value);
					this.SendPropertyChanging();
					this._classID = value;
					this.SendPropertyChanged("classID");
					this.OnclassIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_speakerID", DbType="BigInt NOT NULL")]
		public long speakerID
		{
			get
			{
				return this._speakerID;
			}
			set
			{
				if ((this._speakerID != value))
				{
					if (this._SpeakerEntityItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnspeakerIDChanging(value);
					this.SendPropertyChanging();
					this._speakerID = value;
					this.SendPropertyChanged("speakerID");
					this.OnspeakerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_duration", DbType="Time")]
		public System.Nullable<System.TimeSpan> duration
		{
			get
			{
				return this._duration;
			}
			set
			{
				if ((this._duration != value))
				{
					this.OndurationChanging(value);
					this.SendPropertyChanging();
					this._duration = value;
					this.SendPropertyChanged("duration");
					this.OndurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassEntity_EntityItem", Storage="_ClassEntityItem", ThisKey="classID", OtherKey="entityID", IsUnique=true, IsForeignKey=false)]
		public EntityItem ClassEntityItem
		{
			get
			{
				return this._ClassEntityItem.Entity;
			}
			set
			{
				EntityItem previousValue = this._ClassEntityItem.Entity;
				if (((previousValue != value) 
							|| (this._ClassEntityItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClassEntityItem.Entity = null;
						previousValue.ClassEntity = null;
					}
					this._ClassEntityItem.Entity = value;
					if ((value != null))
					{
						value.ClassEntity = this;
					}
					this.SendPropertyChanged("ClassEntityItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassEntity_CatalogItemExtend", Storage="_CatalogItemExtend", ThisKey="classID", OtherKey="entityID", IsUnique=true, IsForeignKey=false)]
		public CatalogItemExtend CatalogItemExtend
		{
			get
			{
				return this._CatalogItemExtend.Entity;
			}
			set
			{
				CatalogItemExtend previousValue = this._CatalogItemExtend.Entity;
				if (((previousValue != value) 
							|| (this._CatalogItemExtend.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CatalogItemExtend.Entity = null;
						previousValue.ClassEntity = null;
					}
					this._CatalogItemExtend.Entity = value;
					if ((value != null))
					{
						value.ClassEntity = this;
					}
					this.SendPropertyChanged("CatalogItemExtend");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_ClassEntity", Storage="_EntityItem", ThisKey="classID", OtherKey="parentEntityID", IsForeignKey=true)]
		public EntityItem EntityItem
		{
			get
			{
				return this._EntityItem.Entity;
			}
			set
			{
				EntityItem previousValue = this._EntityItem.Entity;
				if (((previousValue != value) 
							|| (this._EntityItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityItem.Entity = null;
						previousValue.FileClassEntity = null;
					}
					this._EntityItem.Entity = value;
					if ((value != null))
					{
						value.FileClassEntity = this;
						this._classID = value.parentEntityID;
					}
					else
					{
						this._classID = default(long);
					}
					this.SendPropertyChanged("EntityItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_ClassEntity1", Storage="_SpeakerEntityItem", ThisKey="speakerID", OtherKey="entityID", IsForeignKey=true)]
		public EntityItem SpeakerEntityItem
		{
			get
			{
				return this._SpeakerEntityItem.Entity;
			}
			set
			{
				EntityItem previousValue = this._SpeakerEntityItem.Entity;
				if (((previousValue != value) 
							|| (this._SpeakerEntityItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpeakerEntityItem.Entity = null;
						previousValue.ClassEntities.Remove(this);
					}
					this._SpeakerEntityItem.Entity = value;
					if ((value != null))
					{
						value.ClassEntities.Add(this);
						this._speakerID = value.entityID;
					}
					else
					{
						this._speakerID = default(long);
					}
					this.SendPropertyChanged("SpeakerEntityItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CatalogItemExtend")]
	public partial class CatalogItemExtend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _entityID;
		
		private string _code;
		
		private string _notes;
		
		private EntityRef<ClassEntity> _ClassEntity;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnentityIDChanging(long value);
    partial void OnentityIDChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnnotesChanging(string value);
    partial void OnnotesChanged();
    #endregion
		
		public CatalogItemExtend()
		{
			this._ClassEntity = default(EntityRef<ClassEntity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entityID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long entityID
		{
			get
			{
				return this._entityID;
			}
			set
			{
				if ((this._entityID != value))
				{
					if (this._ClassEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnentityIDChanging(value);
					this.SendPropertyChanging();
					this._entityID = value;
					this.SendPropertyChanged("entityID");
					this.OnentityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(128)")]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notes", DbType="NVarChar(MAX)")]
		public string notes
		{
			get
			{
				return this._notes;
			}
			set
			{
				if ((this._notes != value))
				{
					this.OnnotesChanging(value);
					this.SendPropertyChanging();
					this._notes = value;
					this.SendPropertyChanged("notes");
					this.OnnotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassEntity_CatalogItemExtend", Storage="_ClassEntity", ThisKey="entityID", OtherKey="classID", IsForeignKey=true)]
		public ClassEntity ClassEntity
		{
			get
			{
				return this._ClassEntity.Entity;
			}
			set
			{
				ClassEntity previousValue = this._ClassEntity.Entity;
				if (((previousValue != value) 
							|| (this._ClassEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClassEntity.Entity = null;
						previousValue.CatalogItemExtend = null;
					}
					this._ClassEntity.Entity = value;
					if ((value != null))
					{
						value.CatalogItemExtend = this;
						this._entityID = value.classID;
					}
					else
					{
						this._entityID = default(long);
					}
					this.SendPropertyChanged("ClassEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileEntity")]
	public partial class FileEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _fileID;
		
		private short _fileTypeID;
		
		private string _filePath;
		
		private string _alternateFilePath;
		
		private EntityRef<EntityItem> _EntityItem;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfileIDChanging(long value);
    partial void OnfileIDChanged();
    partial void OnfileTypeIDChanging(short value);
    partial void OnfileTypeIDChanged();
    partial void OnfilePathChanging(string value);
    partial void OnfilePathChanged();
    partial void OnalternateFilePathChanging(string value);
    partial void OnalternateFilePathChanged();
    #endregion
		
		public FileEntity()
		{
			this._EntityItem = default(EntityRef<EntityItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long fileID
		{
			get
			{
				return this._fileID;
			}
			set
			{
				if ((this._fileID != value))
				{
					if (this._EntityItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnfileIDChanging(value);
					this.SendPropertyChanging();
					this._fileID = value;
					this.SendPropertyChanged("fileID");
					this.OnfileIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fileTypeID", DbType="SmallInt NOT NULL")]
		public short fileTypeID
		{
			get
			{
				return this._fileTypeID;
			}
			set
			{
				if ((this._fileTypeID != value))
				{
					this.OnfileTypeIDChanging(value);
					this.SendPropertyChanging();
					this._fileTypeID = value;
					this.SendPropertyChanged("fileTypeID");
					this.OnfileTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filePath", DbType="NVarChar(2048)")]
		public string filePath
		{
			get
			{
				return this._filePath;
			}
			set
			{
				if ((this._filePath != value))
				{
					this.OnfilePathChanging(value);
					this.SendPropertyChanging();
					this._filePath = value;
					this.SendPropertyChanged("filePath");
					this.OnfilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_alternateFilePath", DbType="NVarChar(2048)")]
		public string alternateFilePath
		{
			get
			{
				return this._alternateFilePath;
			}
			set
			{
				if ((this._alternateFilePath != value))
				{
					this.OnalternateFilePathChanging(value);
					this.SendPropertyChanging();
					this._alternateFilePath = value;
					this.SendPropertyChanged("alternateFilePath");
					this.OnalternateFilePathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_FileEntity", Storage="_EntityItem", ThisKey="fileID", OtherKey="entityID", IsForeignKey=true)]
		public EntityItem EntityItem
		{
			get
			{
				return this._EntityItem.Entity;
			}
			set
			{
				EntityItem previousValue = this._EntityItem.Entity;
				if (((previousValue != value) 
							|| (this._EntityItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityItem.Entity = null;
						previousValue.FileEntity = null;
					}
					this._EntityItem.Entity = value;
					if ((value != null))
					{
						value.FileEntity = this;
						this._fileID = value.entityID;
					}
					else
					{
						this._fileID = default(long);
					}
					this.SendPropertyChanged("EntityItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CatalogItemXrefPortal")]
	public partial class CatalogItemXrefPortal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _portalID;
		
		private long _catalogItemID;
		
		private bool _isVisible;
		
		private bool _isFree;
		
		private bool _isFreeOffer;
		
		private bool _isFullFree;
		
		private EntityRef<EntityItem> _EntityItem;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnportalIDChanging(long value);
    partial void OnportalIDChanged();
    partial void OncatalogItemIDChanging(long value);
    partial void OncatalogItemIDChanged();
    partial void OnisVisibleChanging(bool value);
    partial void OnisVisibleChanged();
    partial void OnisFreeChanging(bool value);
    partial void OnisFreeChanged();
    partial void OnisFreeOfferChanging(bool value);
    partial void OnisFreeOfferChanged();
    partial void OnisFullFreeChanging(bool value);
    partial void OnisFullFreeChanged();
    #endregion
		
		public CatalogItemXrefPortal()
		{
			this._EntityItem = default(EntityRef<EntityItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_portalID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long portalID
		{
			get
			{
				return this._portalID;
			}
			set
			{
				if ((this._portalID != value))
				{
					this.OnportalIDChanging(value);
					this.SendPropertyChanging();
					this._portalID = value;
					this.SendPropertyChanged("portalID");
					this.OnportalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_catalogItemID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long catalogItemID
		{
			get
			{
				return this._catalogItemID;
			}
			set
			{
				if ((this._catalogItemID != value))
				{
					if (this._EntityItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncatalogItemIDChanging(value);
					this.SendPropertyChanging();
					this._catalogItemID = value;
					this.SendPropertyChanged("catalogItemID");
					this.OncatalogItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isVisible", DbType="Bit NOT NULL")]
		public bool isVisible
		{
			get
			{
				return this._isVisible;
			}
			set
			{
				if ((this._isVisible != value))
				{
					this.OnisVisibleChanging(value);
					this.SendPropertyChanging();
					this._isVisible = value;
					this.SendPropertyChanged("isVisible");
					this.OnisVisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFree", DbType="Bit NOT NULL")]
		public bool isFree
		{
			get
			{
				return this._isFree;
			}
			set
			{
				if ((this._isFree != value))
				{
					this.OnisFreeChanging(value);
					this.SendPropertyChanging();
					this._isFree = value;
					this.SendPropertyChanged("isFree");
					this.OnisFreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFreeOffer", DbType="Bit NOT NULL")]
		public bool isFreeOffer
		{
			get
			{
				return this._isFreeOffer;
			}
			set
			{
				if ((this._isFreeOffer != value))
				{
					this.OnisFreeOfferChanging(value);
					this.SendPropertyChanging();
					this._isFreeOffer = value;
					this.SendPropertyChanged("isFreeOffer");
					this.OnisFreeOfferChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isFullFree", DbType="Bit NOT NULL")]
		public bool isFullFree
		{
			get
			{
				return this._isFullFree;
			}
			set
			{
				if ((this._isFullFree != value))
				{
					this.OnisFullFreeChanging(value);
					this.SendPropertyChanging();
					this._isFullFree = value;
					this.SendPropertyChanged("isFullFree");
					this.OnisFullFreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityItem_CatalogItemXrefPortal", Storage="_EntityItem", ThisKey="catalogItemID", OtherKey="entityID", IsForeignKey=true)]
		public EntityItem EntityItem
		{
			get
			{
				return this._EntityItem.Entity;
			}
			set
			{
				EntityItem previousValue = this._EntityItem.Entity;
				if (((previousValue != value) 
							|| (this._EntityItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityItem.Entity = null;
						previousValue.CatalogItemXrefPortals.Remove(this);
					}
					this._EntityItem.Entity = value;
					if ((value != null))
					{
						value.CatalogItemXrefPortals.Add(this);
						this._catalogItemID = value.entityID;
					}
					else
					{
						this._catalogItemID = default(long);
					}
					this.SendPropertyChanged("EntityItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
